{"version":3,"sources":["C:/code/github/insanityisnice/rabbit-topics/consumer/src async","C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/app.component.css","C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/app.component.html","C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/app.component.ts","C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/app.module.ts","C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/messages.service.ts","C:/code/github/insanityisnice/rabbit-topics/consumer/src/environments/environment.ts","C:/code/github/insanityisnice/rabbit-topics/consumer/src/main.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA,8D;;;;;;;ACNA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA,2C;;;;;;;ACXA,gKAAgK,SAAS,e;;;;;;;;;;;;;;;;;;;;ACA/H;AACW;AAOrD,IAAa,YAAY;IAGvB,sBAAoB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAFpD,aAAQ,GAAkB,CAAE,QAAQ,EAAE,QAAQ,CAAE,CAAC;IAEM,CAAC;IAExD,+BAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,kCAAW,GAAnB;QAAA,iBAMC;QALC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE;aAC7B,IAAI,CAAC,cAAI;YACR,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,KAAI,CAAC,QAAQ,GAAG,IAAI;QACtB,CAAC,CAAC,CAAC;IACT,CAAC;IACH,mBAAC;AAAD,CAAC;AAhBY,YAAY;IALxB,wFAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,0EAAmC;QACnC,yEAAkC;KACnC,CAAC;yDAIqC,0EAAe,oBAAf,0EAAe;GAHzC,YAAY,CAgBxB;AAhBwB;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACjB;AACQ;AAEF;AAEM;AAerD,IAAa,SAAS;IAAtB;IAAyB,CAAC;IAAD,gBAAC;AAAD,CAAC;AAAb,SAAS;IAbrB,sFAAQ,CAAC;QACR,YAAY,EAAE;YACZ,oEAAY;SACb;QACD,OAAO,EAAE;YACP,gFAAa;YACb,iEAAU;SACX;QACD,SAAS,EAAE;YACT,0EAAe;SAChB;QACD,SAAS,EAAE,CAAC,oEAAY,CAAC;KAC1B,CAAC;GACW,SAAS,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;ACrB6B;AACW;AAEzB;AAGrC,IAAa,eAAe;IAIxB,yBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAF9B,QAAG,GAAW,oCAAoC,CAAC;IAGnD,CAAC;IAED,qCAAW,GAAX;QACI,IAAI,cAAc,GAAG,IAAI,qEAAc,EAAE,CAAC;QAE1C,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI;aACJ,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,CAAC;aAC7B,SAAS,EAAE;aACX,IAAI,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACvB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAEO,qCAAW,GAAnB,UAAoB,KAAU;QAC1B,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IACL,sBAAC;AAAD,CAAC;AAtBY,eAAe;IAD3B,wFAAU,EAAE;yDAKiB,2DAAI,oBAAJ,2DAAI;GAJrB,eAAe,CAsB3B;AAtB2B;;;;;;;;;;ACN5B;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEhF,mFALmF;AAK5E,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;;;;;;;;;;;;;;ACP6C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,4FAAc,EAAE,CAAC;AACnB,CAAC;AAED,wHAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC,CAAC","file":"main.bundle.js","sourcesContent":["function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../../../../src async recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/code/github/insanityisnice/rabbit-topics/consumer/src async\n// module id = ../../../../../src async recursive\n// module chunks = 1","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = 1","module.exports = \"<!--The whole content below can be removed with the new code.-->\\r\\n<div>\\r\\n  <h1>Consumer</h1>\\r\\n  <p *ngFor=\\\"let message of messages\\\">{{message}}</p>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = 1","import { Component } from '@angular/core';\r\nimport { MessagesService } from './messages.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  messages: Array<string> = [ \"Test 1\", \"Test 2\" ];\r\n\r\n  constructor(private messagesService: MessagesService) {}\r\n\r\n  ngOnInit() {\r\n    this.getMessages();\r\n  }\r\n\r\n  private getMessages(): void {\r\n    this.messagesService.getMessages()\r\n        .then(data => {\r\n          console.log(data);\r\n          this.messages = data\r\n        });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { Http, HttpModule } from '@angular/http';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { MessagesService } from './messages.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpModule\r\n  ],\r\n  providers: [\r\n    MessagesService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/app.module.ts","import { OnInit, Injectable } from '@angular/core';\r\nimport { Headers, Http, RequestOptions } from '@angular/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\n@Injectable()\r\nexport class MessagesService {\r\n\r\n    url: string = `http://localhost:5000/api/messages`;\r\n\r\n    constructor(private http: Http) {\r\n    }\r\n    \r\n    getMessages() {\r\n        var requestOptions = new RequestOptions();\r\n\r\n        console.log('Getting messages.');\r\n        return this.http\r\n                   .get(this.url, requestOptions)\r\n                   .toPromise()\r\n                   .then(res => res.json())\r\n                   .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error occured: ', error);\r\n        return Promise.reject(error.message || error);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/code/github/insanityisnice/rabbit-topics/consumer/src/app/messages.service.ts","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// C:/code/github/insanityisnice/rabbit-topics/consumer/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// C:/code/github/insanityisnice/rabbit-topics/consumer/src/main.ts"],"sourceRoot":"webpack:///"}